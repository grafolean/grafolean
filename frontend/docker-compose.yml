version: '2.1'
services:

  # This file helps set up backend (and other services) so that we can run frontend locally.
  # The assumption is that the services have already been built.

  db:
    image: timescale/timescaledb:1.7.4-pg12
    environment:
      - POSTGRES_DB=grafoleandev
      - POSTGRES_USER=grafoleandev
      - POSTGRES_PASSWORD=grafoleandev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h db -U grafoleandev -t 1 -q"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - ${GRAFOLEAN_DB_DIR:-/grafolean_tmp_db/}:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - grafoleandev
    container_name:
      dbdev

  mosquitto:
    image: grafolean/mosquitto
    ports:
      - "1883:1883"
      - "9883:9883"
    networks:
      - grafoleandev
    container_name:
      mosquittodev

  grafolean:
    # Actually, this service also provides another frontend, but we will ignore it and access only the backend.
    image: grafolean/grafolean
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=dbdev
      - DB_DATABASE=grafoleandev
      - DB_USERNAME=grafoleandev
      - DB_PASSWORD=grafoleandev
      - MQTT_HOSTNAME=mosquittodev
      - MQTT_PORT=1883
      # how is the mqtt broker seen from perspective of frontend?
      - MQTT_WS_HOSTNAME=localhost
      - MQTT_WS_PORT=9883
      - MQTT_WS_SSL=false
      # since backend is on a different origin than frontend, we need to set this:
      - FRONTEND_ORIGIN=http://localhost:3000
      - GRAFOLEAN_CORS_DOMAINS=http://localhost:3000
      - MAIL_SERVER=${MAIL_SERVER}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USE_TLS=${MAIL_USE_TLS}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-false}
      - TELEMETRY=${TELEMETRY}
    ports:
      - "5000:80"
    networks:
      - grafoleandev
    volumes:
#      - ../backend/:/grafolean/backend/
      - shared-secrets:/shared-secrets
    container_name:
      grafoleandev

  snmpbot:
    image: grafolean/grafolean-snmp-bot
    container_name: snmpdev
    depends_on:
      db:
        condition: service_healthy
    environment:
      - BACKEND_URL=http://grafolean/api
      - BOT_TOKEN_FROM_FILE=/shared-secrets/tokens/snmp-bot.token
      - JOBS_REFRESH_INTERVAL=60
      - DB_HOST=dbdev
      - DB_DATABASE=grafoleandev
      - DB_USERNAME=grafoleandev
      - DB_PASSWORD=grafoleandev
    restart: always
    networks:
      - grafoleandev
    volumes:
      - shared-secrets:/shared-secrets

  pingbot:
    image: grafolean/grafolean-ping-bot
    container_name: pingdev
    environment:
      - BACKEND_URL=http://grafolean/api
      - BOT_TOKEN_FROM_FILE=/shared-secrets/tokens/ping-bot.token
      - JOBS_REFRESH_INTERVAL=60
    restart: always
    networks:
      - grafoleandev
    volumes:
      - shared-secrets:/shared-secrets

  netflowbot:
    image: grafolean/grafolean-netflow-bot
    container_name: netflowbotdev
    depends_on:
      db:
        condition: service_healthy
    environment:
      - BACKEND_URL=http://grafolean/api
      - BOT_TOKEN_FROM_FILE=/shared-secrets/tokens/netflow-bot.token
      - JOBS_REFRESH_INTERVAL=${JOBS_REFRESH_INTERVAL:-60}
      - DB_HOST=db
      - DB_DATABASE=grafoleandev
      - DB_USERNAME=grafoleandev
      - DB_PASSWORD=grafoleandev
    restart: always
    networks:
      - grafoleandev
    volumes:
      - shared-secrets:/shared-secrets

  netflowcollector:
    image: grafolean/grafolean-netflow-bot
    container_name: netflowcollectordev
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NAMED_PIPE_FILENAME=/shared-grafolean/netflow.pipe
      - NETFLOW_PORT=2055
    ports:
      - "${NETFLOW_PORT:-2055}:2055/udp"
    restart: always
    # NetFlow collector uses the same docker image as bot (grafolean/grafolean-netflow-bot),
    # but specifies a different entrypoint:
    entrypoint:
      - python
      - -m
      - netflowcollector
    volumes:
      - shared-grafolean:/shared-grafolean
    # this is the only NetFlow process that listens on the host network interface:
    network_mode: "host"

  netflowwriter:
    # Reads netflow data from named pipe and writes it to DB.
    image: grafolean/grafolean-netflow-bot
    container_name: netflowwriterdev
    depends_on:
      db:
        condition: service_healthy
    environment:
      - NAMED_PIPE_FILENAME=/shared-grafolean/netflow.pipe
      - DB_HOST=db
      - DB_DATABASE=grafoleandev
      - DB_USERNAME=grafoleandev
      - DB_PASSWORD=grafoleandev
    restart: always
    # CAREFUL: NetFlow collector uses the same docker image as bot
    # (grafolean/grafolean-netflow-bot), but specifies a different entrypoint:
    entrypoint:
      - python
      - -m
      - netflowwriter
    networks:
      - grafoleandev
    volumes:
      - shared-grafolean:/shared-grafolean

networks:
  grafoleandev:
    name: grafolean

volumes:
  shared-secrets:
  shared-grafolean:
