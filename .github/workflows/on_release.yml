name: Deploy to Docker Hub

on:
  release:
    types: [published]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:


    - name: Checkout source code
      uses: actions/checkout@v1


    - name: Create VERSION.js
      if: success() && startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_REF_TAG: ${{ github.ref }}
      run: |
        export VERSION=${GITHUB_REF_TAG:10:50}
        echo "export const VERSION_INFO = { ciCommitTag: '$VERSION' };" > ./frontend/src/VERSION.js
        cat frontend/src/VERSION.js


    - name: Create CHANGELOG.json
      if: success() && startsWith(github.ref, 'refs/tags/v')
      run: |
        curl "https://api.github.com/repos/grafolean/grafolean/releases?per_page=100" > /tmp/tags.json
        cat /tmp/tags.json | jq '[.[] | select(.name | test("^v[0-9]+[.][0-9]+[.][0-9]+$")) | { version: .name, changelog: .body, created_at: .created_at }]' > frontend/src/CHANGELOG.json


    # DOCKER:
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: grafolean
        password: ${{ secrets.DOCKER_PASSWORD }}


    - name: Set up QEMU for more platforms
      uses: docker/setup-qemu-action@v1
      with:
        platforms: all


    - name: Set docker build as alias to buildx (multiarch build)
      uses: docker/setup-buildx-action@v1
      id: buildx
      with:
        install: false


    - name: Deploy Grafolean to Docker Hub - multiplatform
      if: success() && startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_REF_TAG: ${{ github.ref }}
        DOCKER_IMAGE: grafolean/grafolean
        BUILD_PLATFORMS: linux/arm/v7
      # for caching purposes, we push builder images of the multistage build to docker registry:
      # https://lipanski.com/posts/speed-up-your-docker-builds-with-cache-from
      run: |
        echo "Available plaftorms: ${{ steps.buildx.outputs.platforms }}"
        echo "Building for plaftorms: $BUILD_PLATFORMS"
        export VERSION=${GITHUB_REF_TAG:10:50}
        echo "Version is $VERSION"
        export LAST_KNOWN_VERSION=`git tag -l --sort=-version:refname "v*.*.*" | grep -v rc | head -n 1 | tr -d '[:space:]'`
        echo "Last known version is $LAST_KNOWN_VERSION"
        cp ./install/docker-compose/Dockerfile .

        docker pull "docker.io/$DOCKER_IMAGE:cache-build-frontend" || true
        docker pull "docker.io/$DOCKER_IMAGE:cache-build-backend" || true
        docker pull "docker.io/$DOCKER_IMAGE:cache-build-swagger" || true
        docker buildx build --target build-frontend --cache-from "docker.io/${DOCKER_IMAGE}:cache-build-frontend" --push --platform "$BUILD_PLATFORMS" -t "docker.io/${DOCKER_IMAGE}:cache-build-frontend" .
        docker buildx build --target build-backend --cache-from "docker.io/${DOCKER_IMAGE}:cache-build-backend" --push --platform "$BUILD_PLATFORMS" -t "docker.io/${DOCKER_IMAGE}:cache-build-backend" .
        docker buildx build --target convert-swagger-to-html --cache-from "docker.io/${DOCKER_IMAGE}:cache-build-swagger" --push --platform "$BUILD_PLATFORMS" -t "docker.io/${DOCKER_IMAGE}:cache-build-swagger" .

        docker pull "docker.io/$DOCKER_IMAGE" || true
        [ "$LAST_KNOWN_VERSION" == "$VERSION" ] && echo "MARKING AS LATEST!" || echo "NOT MARKING AS LATEST!"
        [ "$LAST_KNOWN_VERSION" == "$VERSION" ] && docker buildx build --cache-from "docker.io/$DOCKER_IMAGE:latest" --push --platform "$BUILD_PLATFORMS" -t "docker.io/$DOCKER_IMAGE:$VERSION" -t "docker.io/$DOCKER_IMAGE:latest" --build-arg VERSION=$VERSION --build-arg VCS_REF=$GITHUB_SHA --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') . || docker buildx build --cache-from "docker.io/$DOCKER_IMAGE:latest"--push --platform "$BUILD_PLATFORMS" -t "docker.io/$DOCKER_IMAGE:$VERSION" --build-arg VERSION=$VERSION --build-arg VCS_REF=$GITHUB_SHA --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') .
