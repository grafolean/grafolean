server {
    listen       80 default_server;
    listen       [::]:80 default_server;

    # MQTT broker will try to authenticate via HTTP, allow it:
    location /api/admin/mqtt-auth-plug/ {
        include uwsgi_params;
        uwsgi_pass unix:///tmp/uwsgi.socket;
    }

    # redirecting API calls would not be safe because developers might not realize their mistake, so we
    # must explicitly reject them on port 80:
    location /api/ {
        return 400 "Please use HTTPS!";
    }

    # The next location is here so that the certbot can authenticate the domain, if the docker-compose mounted appropriate dir there:
    location /.well-known/acme-challenge/ {
        root /var/www/acme-challenge;
    }

    location / {
        # redirect all other HTTP traffic (permanently) to HTTPS:
        return 301 https://$host$request_uri;
    }
}

server {
    listen       443 ssl default_server;
    listen       [::]:443 ssl default_server;

    ssl_certificate /etc/certs/cert.crt;
    ssl_certificate_key /etc/certs/cert.key;

    root         /var/www/html;

    location /api/ {
        include uwsgi_params;
        uwsgi_pass unix:///tmp/uwsgi.socket;
    }

    location /api-doc {
        # serve API documentation static files from /grafolean/api-doc/:
        root  /grafolean/;
        index index.html;
    }

    # Handling MQTT websockets connection through nginx saves us a lot of trouble:
    # - easier CORS handling (there is no cross-origin - frontend and mqtt ws are on the same origin)
    # - easier CSP handling ('connect-src' can be 'self') - well, apparently this works only for ws://, not for wss://; thus the need to set MQTT_WS_HOSTNAME env var
    # - adding TLS can be done in one place (here)
    location /mqtt {
        # nginx doesn't allow env vars to be used (easily), so we substitute MQTT_HOSTNAME at start time:
        proxy_pass http://$MQTT_HOSTNAME:9883/mqtt;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 3600000000s; # there doesn't seem to be a way to set this to unlimited, so we'll settle for ~100 years
    }

    location / {
        # avoid clickjacking by not allowing our page to be embedded in (i)frame:
        add_header X-Frame-Options SAMEORIGIN;
        # always obey mime type:
        add_header X-Content-Type-Options nosniff;
        # best of all, Content-Security-Headers, along with reporting to our backend:
        #   (note that META tags in index.html might interfere with this - if you change anything, make sure you also change META tags appropriately)
        #   (also note that apply_env.sh changes 'connect-src' to allow ws:// and wss:// connections)
        add_header Content-Security-Policy "report-uri /api/status/cspreport/; default-src 'none'; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'; connect-src 'self'; font-src 'self'; img-src 'self'; worker-src 'self'; manifest-src 'self';";

        try_files $uri /index.html;
    }
}
